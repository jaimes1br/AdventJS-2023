const getStaircasePaths = require('./brincos_escalera')

test('Test: return type',() => {
    expect(
        Array.isArray(getStaircasePaths(5, 1)))
        .toBe(true)
})

test(`Test: getStaircasePaths(4, 2)`, () => {
    expect(
        getStaircasePaths(4, 2)
    ).toStrictEqual([
        [
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          2
        ],
        [
          1,
          2,
          1
        ],
        [
          2,
          1,
          1
        ],
        [
          2,
          2
        ]
      ]
      )
})

test(`Test:  getStaircasePaths(0, 0)`, () => {
    expect(
        getStaircasePaths(0, 0)
    ).toStrictEqual([[]])
})

test(`Test: getStaircasePaths(1, 1)`, () => {
    expect(
        getStaircasePaths(1, 1)
    ).toStrictEqual([[1]])
})

test(`Test: getStaircasePaths(7, 3)`, () => {
    expect(
        getStaircasePaths(7, 3)
    ).toStrictEqual([
        [
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          1,
          1,
          2
        ],
        [
          1,
          1,
          1,
          1,
          2,
          1
        ],
        [
          1,
          1,
          1,
          1,
          3
        ],
        [
          1,
          1,
          1,
          2,
          1,
          1
        ],
        [
          1,
          1,
          1,
          2,
          2
        ],
        [
          1,
          1,
          1,
          3,
          1
        ],
        [
          1,
          1,
          2,
          1,
          1,
          1
        ],
        [
          1,
          1,
          2,
          1,
          2
        ],
        [
          1,
          1,
          2,
          2,
          1
        ],
        [
          1,
          1,
          2,
          3
        ],
        [
          1,
          1,
          3,
          1,
          1
        ],
        [
          1,
          1,
          3,
          2
        ],
        [
          1,
          2,
          1,
          1,
          1,
          1
        ],
        [
          1,
          2,
          1,
          1,
          2
        ],
        [
          1,
          2,
          1,
          2,
          1
        ],
        [
          1,
          2,
          1,
          3
        ],
        [
          1,
          2,
          2,
          1,
          1
        ],
        [
          1,
          2,
          2,
          2
        ],
        [
          1,
          2,
          3,
          1
        ],
        [
          1,
          3,
          1,
          1,
          1
        ],
        [
          1,
          3,
          1,
          2
        ],
        [
          1,
          3,
          2,
          1
        ],
        [
          1,
          3,
          3
        ],
        [
          2,
          1,
          1,
          1,
          1,
          1
        ],
        [
          2,
          1,
          1,
          1,
          2
        ],
        [
          2,
          1,
          1,
          2,
          1
        ],
        [
          2,
          1,
          1,
          3
        ],
        [
          2,
          1,
          2,
          1,
          1
        ],
        [
          2,
          1,
          2,
          2
        ],
        [
          2,
          1,
          3,
          1
        ],
        [
          2,
          2,
          1,
          1,
          1
        ],
        [
          2,
          2,
          1,
          2
        ],
        [
          2,
          2,
          2,
          1
        ],
        [
          2,
          2,
          3
        ],
        [
          2,
          3,
          1,
          1
        ],
        [
          2,
          3,
          2
        ],
        [
          3,
          1,
          1,
          1,
          1
        ],
        [
          3,
          1,
          1,
          2
        ],
        [
          3,
          1,
          2,
          1
        ],
        [
          3,
          1,
          3
        ],
        [
          3,
          2,
          1,
          1
        ],
        [
          3,
          2,
          2
        ],
        [
          3,
          3,
          1
        ]
      ])
})

test(`Test: getStaircasePaths(3, 3)`, () => {
    expect(
        getStaircasePaths(3, 3)
    ).toStrictEqual([
        [
          1,
          1,
          1
        ],
        [
          1,
          2
        ],
        [
          2,
          1
        ],
        [
          3
        ]
      ])
})

test(`Test: getStaircasePaths(2, 1)`, () => {
    expect(
        getStaircasePaths(2, 1)
    ).toStrictEqual([
        [
          1,
          1
        ]
      ]
      )
})
test(`Test: getStaircasePaths(5, 2)`, () => {
    expect(
        getStaircasePaths(5, 2)
    ).toStrictEqual([
        [
          1,
          1,
          1,
          1,
          1
        ],
        [
          1,
          1,
          1,
          2
        ],
        [
          1,
          1,
          2,
          1
        ],
        [
          1,
          2,
          1,
          1
        ],
        [
          1,
          2,
          2
        ],
        [
          2,
          1,
          1,
          1
        ],
        [
          2,
          1,
          2
        ],
        [
          2,
          2,
          1
        ]
      ])
})


